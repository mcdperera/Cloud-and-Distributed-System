/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Label;
import java.awt.Panel;
import java.awt.TextArea;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;

/**
 *
 * @author Charmal
 */
public final class MainForm extends javax.swing.JFrame {

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playerPanel = new java.awt.Panel();
        r1Panel = new java.awt.Panel();
        r1Label = new java.awt.Label();
        r2Panel = new java.awt.Panel();
        r2Label = new java.awt.Label();
        b2Panel = new java.awt.Panel();
        b2Label = new java.awt.Label();
        b1Panel = new java.awt.Panel();
        b1Label = new java.awt.Label();
        commonMessageTextArea = new java.awt.TextArea();
        mainInfoPanel = new java.awt.Panel();
        label4 = new java.awt.Label();
        serverConnectionLabel = new java.awt.Label();
        label1 = new java.awt.Label();
        usernameLabel = new java.awt.Label();
        dealAmountLabel = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        label5 = new java.awt.Label();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        connectMenuItem = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1300, 700));
        setResizable(false);

        playerPanel.setMaximumSize(new java.awt.Dimension(1500, 100));

        javax.swing.GroupLayout playerPanelLayout = new javax.swing.GroupLayout(playerPanel);
        playerPanel.setLayout(playerPanelLayout);
        playerPanelLayout.setHorizontalGroup(
            playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1081, Short.MAX_VALUE)
        );
        playerPanelLayout.setVerticalGroup(
            playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        r1Panel.setBackground(new java.awt.Color(255, 51, 51));
        r1Panel.setMaximumSize(new java.awt.Dimension(70, 100));
        r1Panel.setMinimumSize(new java.awt.Dimension(70, 100));
        r1Panel.setPreferredSize(new java.awt.Dimension(70, 100));

        javax.swing.GroupLayout r1PanelLayout = new javax.swing.GroupLayout(r1Panel);
        r1Panel.setLayout(r1PanelLayout);
        r1PanelLayout.setHorizontalGroup(
            r1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );
        r1PanelLayout.setVerticalGroup(
            r1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        r1Label.setBackground(new java.awt.Color(255, 51, 51));
        r1Label.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        r2Panel.setBackground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout r2PanelLayout = new javax.swing.GroupLayout(r2Panel);
        r2Panel.setLayout(r2PanelLayout);
        r2PanelLayout.setHorizontalGroup(
            r2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );
        r2PanelLayout.setVerticalGroup(
            r2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        r2Label.setBackground(new java.awt.Color(255, 51, 51));
        r2Label.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        b2Panel.setBackground(new java.awt.Color(51, 51, 255));
        b2Panel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout b2PanelLayout = new javax.swing.GroupLayout(b2Panel);
        b2Panel.setLayout(b2PanelLayout);
        b2PanelLayout.setHorizontalGroup(
            b2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );
        b2PanelLayout.setVerticalGroup(
            b2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        b2Label.setBackground(new java.awt.Color(0, 0, 255));
        b2Label.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        b1Panel.setBackground(new java.awt.Color(51, 51, 255));

        javax.swing.GroupLayout b1PanelLayout = new javax.swing.GroupLayout(b1Panel);
        b1Panel.setLayout(b1PanelLayout);
        b1PanelLayout.setHorizontalGroup(
            b1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );
        b1PanelLayout.setVerticalGroup(
            b1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        b1Label.setBackground(new java.awt.Color(0, 0, 255));
        b1Label.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        commonMessageTextArea.setName(""); // NOI18N
        commonMessageTextArea.setVisible(false);

        mainInfoPanel.setBackground(new java.awt.Color(240, 240, 240));
        mainInfoPanel.setMaximumSize(new java.awt.Dimension(292, 275));

        label4.setText("Server Connection");

        serverConnectionLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        label1.setText("Username");

        usernameLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        dealAmountLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 8)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("Game stat needs to add.\n\n\t--------Blue Team----------\t---------Red Team----\n\tPlayer 1 \tPlayer 2 \tPlayer 3\tPlayer 4\nBid\t5\t6\t7\t8\t\nWon tricks\t2\t3\t5\t6");
        jScrollPane1.setViewportView(jTextArea1);

        label5.setText("My bid");

        javax.swing.GroupLayout mainInfoPanelLayout = new javax.swing.GroupLayout(mainInfoPanel);
        mainInfoPanel.setLayout(mainInfoPanelLayout);
        mainInfoPanelLayout.setHorizontalGroup(
            mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainInfoPanelLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainInfoPanelLayout.createSequentialGroup()
                        .addGroup(mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dealAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serverConnectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainInfoPanelLayout.createSequentialGroup()
                    .addGap(97, 97, 97)
                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(157, Short.MAX_VALUE)))
        );
        mainInfoPanelLayout.setVerticalGroup(
            mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainInfoPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serverConnectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dealAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainInfoPanelLayout.createSequentialGroup()
                    .addGap(96, 96, 96)
                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(159, Short.MAX_VALUE)))
        );

        fileMenu.setText("File");

        connectMenuItem.setText("Connect to Server");
        connectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(connectMenuItem);

        jMenuItem2.setText("Console message");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);
        fileMenu.getAccessibleContext().setAccessibleDescription("");

        helpMenu.setText("Help");
        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(282, 282, 282)
                                .addComponent(b1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(playerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(r1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(r1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(b2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(r2Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(r2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(b2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(334, 334, 334)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mainInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)))
                .addComponent(commonMessageTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {b1Panel, b2Panel, r1Panel, r2Panel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addComponent(commonMessageTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(131, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addComponent(r1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b2Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(b2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(49, 49, 49)
                                        .addComponent(b1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(r1Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(121, 121, 121))))
                            .addComponent(mainInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addComponent(b1Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(r2Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(r2Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {b1Panel, b2Panel, playerPanel, r1Panel, r2Panel});

        r1Label.getAccessibleContext().setAccessibleName("player");

        getAccessibleContext().setAccessibleName("frame1");
        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static boolean ServerConnected;

    List<String> CardList;

    private static Client ClientObj;

    private String CurrentPlayer;

    private String Username;

    Panel CurrentPanel;

    Label CurrentLabel;

    /**
     * Creates new form MainForm
     */
    public MainForm() {

        initComponents();

        ClientObj = new Client();

        serverConnectionPopup();

        modifyLayouts();

        //addTableView();
    }

    public void displayServerConnection() {
        if (ServerConnected) {
            serverConnectionLabel.setText("Connected");
            this.setTitle("User connected. Play card..");
            new ListenFromServer().start();
        } else {
            serverConnectionLabel.setText("Not Connected");
            this.setTitle("Not Connected to the server. "
                    + "Use server IP /port and username to connect");
        }
    }

    private void modifyLayouts() {
        playerPanel.setLayout(new GridLayout(1, 13));
        b1Panel.setLayout(new GridLayout(1, 1));
        b2Panel.setLayout(new GridLayout(1, 1));
        r1Panel.setLayout(new GridLayout(1, 1));
        r2Panel.setLayout(new GridLayout(1, 1));
    }

    private void connectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectMenuItemActionPerformed

        if (!ServerConnected) {
            serverConnectionPopup();

            displayServerConnection();
        } else {
            JOptionPane.showConfirmDialog(null, null, "Already connected to the server",
                    JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE);
        }


    }//GEN-LAST:event_connectMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        consoleMessagePopup();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label b1Label;
    private java.awt.Panel b1Panel;
    private java.awt.Label b2Label;
    private java.awt.Panel b2Panel;
    private java.awt.TextArea commonMessageTextArea;
    private javax.swing.JMenuItem connectMenuItem;
    private java.awt.Label dealAmountLabel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private java.awt.Label label1;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Panel mainInfoPanel;
    private java.awt.Panel playerPanel;
    private java.awt.Label r1Label;
    private java.awt.Panel r1Panel;
    private java.awt.Label r2Label;
    private java.awt.Panel r2Panel;
    private java.awt.Label serverConnectionLabel;
    private java.awt.Label usernameLabel;
    // End of variables declaration//GEN-END:variables

    private void consoleMessagePopup() {

        commonMessageTextArea.setVisible(true);

        JPanel panel = new JPanel(new GridLayout(0, 1));

        panel.add(new JLabel("Message(s)"));
        panel.add(commonMessageTextArea);

        JOptionPane.showConfirmDialog(null, panel, "Console Message",
                JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE);

    }

    private void serverConnectionPopup() {

        JTextField serverIpText = new JTextField("localhost");
        JTextField portText = new JTextField("1500");
        JTextField usernameText = new JTextField("OSU");

        JPanel panel = new JPanel(new GridLayout(0, 1));

        panel.add(new JLabel("Server Ip"));
        panel.add(serverIpText);

        panel.add(new JLabel("Port"));
        panel.add(portText);

        panel.add(new JLabel("Username"));
        panel.add(usernameText);

        int result = JOptionPane.showConfirmDialog(null, panel, "Connect to the server",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.OK_OPTION) {

            ServerConnected = ClientObj.start(serverIpText.getText(),
                    portText.getText(), usernameText.getText());

            displayServerConnection();
        } else {
            ClientObj.display("Cancelled");
        }

    }

    private void usernamePopup(String playerName) {

        JTextField usernameText = new JTextField();

        JPanel panel = new JPanel(new GridLayout(0, 1));

        panel.add(new JLabel("Username"));
        panel.add(usernameText);

        int result = JOptionPane.showConfirmDialog(null, panel, "Username already exists. Use another user name.",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.OK_OPTION) {

            Message message = new Message(MessageType.ONNECTIONESTABLISH_CLIENT_USERNAMEDUPLICATE_RESPONSE.getValue(),
                    true, usernameText.getText() + "sends the username again", false, ErrorMessageType.NONE.getValue());

            message.setConnectionMessage(new ConnectionMessage(playerName, usernameText.getText()));

            ClientObj.sendMessage(message);
        } else {
            ClientObj.disconnect();
            //System.exit(0);
        }

    }

    private void addBidPopup() {

        JTextField dealText = new JTextField("5");

        JPanel panel = new JPanel(new GridLayout(0, 1));

        panel.add(new JLabel("Your bid"));
        panel.add(dealText);

        int result = JOptionPane.showConfirmDialog(null, panel, "Add your bid",
                JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE);

        int amount = Integer.parseInt(dealText.getText());

        Message message = new Message(MessageType.BIDDING_CLIENTRESPONSE.getValue(),
                true, Username + "send bid amount.", false, ErrorMessageType.NONE.getValue());

        if (result == JOptionPane.OK_OPTION) {

            dealAmountLabel.setText(Integer.toString(amount));

            message.setBiddingMessage(new BiddingMessage(CurrentPlayer, amount));
        } else {
            message.setBiddingMessage(new BiddingMessage(CurrentPlayer, 5));
        }

        ClientObj.sendMessage(message);
    }

    private void appendTextCommonMessage(String message) {
        commonMessageTextArea.append(message);
    }

    private Image getImage(String card) throws IOException {
        return ImageIO.read(getClass().getResource("/resources/" + card + ".png"));
    }

    private void sendSelectedCard(String card) {
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null,
                "Would you like procced?", "Warning", dialogButton);
        if (dialogResult == JOptionPane.YES_OPTION) {

            loadSelectedCard(card);

            removeButtonFromPlayerPanel(card);

        }

    }

    private void loadSelectedCard(String card) {
        try {
            Image img = getImage(card);
            loadCard(img, CurrentPanel, false);
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    private void removeButtonFromPlayerPanel(String buttonName) {

        Component[] componentList = playerPanel.getComponents();

        for (Component c : componentList) {

            if (c instanceof JButton && c.getName().equals(buttonName)) {

                playerPanel.remove(c);
            }
        }

        playerPanel.revalidate();
        playerPanel.repaint();
    }

    private void removeAllComponents(Panel panel) {

        Component[] componentList = panel.getComponents();

        for (Component c : componentList) {

            if (c instanceof JButton) {

                panel.remove(c);
            }
        }

        panel.revalidate();
        panel.repaint();
    }

    private void loadCard(Image image, Panel panel, boolean isClickEventEnabled) {
        removeAllComponents(panel);

        JButton label = new JButton();
        label.setIcon(new ImageIcon(image));
        label.setSize(70, 100);
        panel.add(label);
    }

    private void loadCards(ArrayList<String> cards) {
        try {

            CardList = cards;//Arrays.asList(cards.toLowerCase().split(","));
            java.util.Collections.sort(CardList);
            loadPlayerPanel();

        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    private void loadPlayerPanel() {
        try {

            for (final String card : CardList) {
                Image img = getImage(card);

                JButton button = new JButton();
                button.setName(card);
                button.setIcon(new ImageIcon(img));
                button.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        sendSelectedCard(card);
                    }
                });
                button.setSize(50, 75);
                playerPanel.add(button);
            }

            playerPanel.revalidate();
            playerPanel.repaint();
            
            setPlayerPanel(false);

        } catch (Exception ex) {
            System.out.println(ex);
        }
    }
    
    private void setPlayerPanel(boolean enable)
    {
        playerPanel.setEnabled(enable);
    }

    class ListenFromServer extends Thread {

        public void run() {
            while (true) {
                try {

                    Message message = (Message) ClientObj.sInput.readObject();

                    System.out.print(message.getMessage());
                    appendTextCommonMessage(message.getMessage() + "\n");

                    switch (message.getType()) {
                        case NONE:
                            System.out.print("None message type send form serer");
                            break;
                        case CONNECTIONESTABLISH_SERVERESPONSE:

                            if (message.isError()) {
                                displayErrorMessage(message);
                            } else {
                                setClient(message.getConnectionMessage());
                            }

                            break;
                        case CONNECTIONESTABLISH_SERVERESPONSE_OTHERPLAYERS:
                            setOtherPlayers(message.getConnectionMessage());
                            break;
                        case CONNECTIONESTABLISH_SERVERESPONSE_PREVIOUSPLAYERS:
                            setOtherPlayers(message.getConnectionMessage());
                            break;
                        case BIDDING_SERVERREQUEST:
                            dealMessage(message.getBiddingMessage());
                            break;
                        case DEAL_CARDS_TO_CLIENT:
                            loadCardsMessage(message.getCardMessage());
                            break;

                    }

                    System.out.print('\n');

                } catch (IOException e) {
                    break;
                } catch (ClassNotFoundException e2) {
                }
            }
        }

        private void setClient(ConnectionMessage connectionMessage) {
            Username = connectionMessage.getUsername();
            usernameLabel.setText(Username);

            CurrentPlayer = connectionMessage.getPlayerName();

            CurrentPanel = selectPanel(CurrentPlayer);

            selectLabel(CurrentPlayer).setText(connectionMessage.getUsername());

        }

        private Panel selectPanel(String player) {
            Panel panel = null;

            if (player.equalsIgnoreCase("b1")) {
                panel = b1Panel;
            } else if (player.equalsIgnoreCase("b2")) {
                panel = b2Panel;
            } else if (player.equalsIgnoreCase("r1")) {
                panel = r1Panel;
            } else if (player.equalsIgnoreCase("r2")) {
                panel = r2Panel;
            }

            return panel;
        }

        private Label selectLabel(String player) {

            Label label = null;

            if (player.equalsIgnoreCase("b1")) {
                label = b1Label;
            } else if (player.equalsIgnoreCase("b2")) {
                label = b2Label;
            } else if (player.equalsIgnoreCase("r1")) {
                label = r1Label;
            } else if (player.equalsIgnoreCase("r2")) {
                label = r2Label;
            }

            return label;
        }

        private void setOtherPlayers(ConnectionMessage connectionMessage) {
            String player = connectionMessage.getPlayerName();
            //CurrentPanel = selectPanel(player);
            selectLabel(player).setText(connectionMessage.getUsername());
        }

        private void dealMessage(BiddingMessage dealMessage) {

            if (dealMessage.getPlayerName().equalsIgnoreCase(CurrentPlayer)) {
                addBidPopup();

            }
        }

        private void loadCardsMessage(CardMessage cardMessage) {
            if (cardMessage.getPlayerName().equalsIgnoreCase(CurrentPlayer)) {
                loadCards(cardMessage.getInitialSetOfCards());
            }
        }

        private void displayErrorMessage(Message message) {
            ErrorMessageType messageType = ErrorMessageType.getEnum(message.getErrorType());
            switch (messageType) {
                case NONE:
                    break;
                case USERNAME_EXISTS:
                    usernamePopup(message.getConnectionMessage().getPlayerName());
                    break;
                case BIDDING_LARGERBID:
                    break;
                case DEAL_CHEATCARD:
                    break;
                default:
                    throw new AssertionError(messageType.name());

            }
        }

    }

}
